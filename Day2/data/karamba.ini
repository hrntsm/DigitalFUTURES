#---
# this is the Karamba3D ini-file
#---
# written by Clemens Preisinger
# 15.08.2011
#
##################################################
# IN ORDER TO KEEP YOUR CHANGES IN CASE OF UPDATES
# RENAME THIS FILE TO 'karamba_user.ini' 
##################################################
#
# - comments start with '#' or ';'
# - string-formatting of numbers follows the C# formating conventions
#   here some examples:
#      just two decimal places
#          "{0:0.00}";    123.4567 -> "123.46"
#          "{0:0.00}";    123.4    -> "123.40"
#      max. two decimal places
#          "{0:0.##}";    123.4567 -> "123.46"
#          "{0:0.##}";    123.4    -> "123.4"
#          "{0:0.##}";    123.0    -> "123"
#      align numbers
#          "{0,10:0.0}";  123.4567 -> "     123.5"
#          "{0,-10:0.0}"; 123.4567 -> "123.5     "
#      ouput number in percent
#          "%";             0.1    -> "10%"
# - colors are named following the C# naming convention or can be input via triples of numbers
# - for properties not found here default values will be chosen 
# - strings need to be enclosed in '"'
# - values and property names are case-sensitive
# - an expression like 'name =' makes the comment above appear in the output of the Settings-component but does not set a value
#
#--- 
# default path of the license directory
# uncomment the entry by removing the '#' and set it to a custom value in case the default does not work for some reason
#---
# license_path = "C:\Program Files\Rhino 6\Plug-ins\Karamba\License"
license_path =

#---
# units to be used in Karamba3D. Do not mix Grasshopper definitions that
# use different units. Make sure to adapt g as well when changing from SI to imperial.
#---
# UnitsSystem = "imperial"
UnitsSystem = "SI"

# internal length unit; assumed for geometry input from Rhino - possible values: "m", "cm", "mm", "µ", "ft", "in"; No consistency checks are performed!
UnitLength = "mm"
# internal force unit - possible values: "MN", "kN", "daN", "N", "cN", "kip"; No consistency checks are performed!
UnitForce = "N"
# internal mass unit - possible values: "t", "kg", "dag", "g", "µg", "lbm"; No consistency checks are performed!
UnitMass = "kg"

#---
# custom units to be used: specify pairs of 'original unit' > 'custom unit' in one line; No consistency checks are performed!
#---
# These units are provided by default:
#    length: "m", "cm", "mm", "µ", "ft", "in"
#    1/length: "1/m", "1/cm", "1/mm", "1/µ", "1/ft", "1/in"
#    length^2: "m2", "cm2", "mm2", "µ2", "ft2", "in2"
#    length^3: "m3", "cm3", "mm3", "µ3", "ft3", "in3"
#    length^4: "m4", "cm4", "mm4", "µ4", "ft4", "in4"
#    length^6: "m6", "cm6", "mm6", "µ6", "ft6", "in6"
#    force: "MN", "kN", "daN", "N", "cN", "kip"
#    force * length: "kNm", "kNcm", "Nm", "Ncm", "daNcm", "kip.ft", "kip.in"
#    force / length: "MN/m", "kN/m", "kN/cm", "N/m", "N/cm", "kip/ft", "kip/in"
#    force / length^2: "MN/m/m", "MN/m2", "kN/m/m", "kN/m2", "kN/cm/cm", "kN/cm2", "N/m/m", "N/m2", "N/cm/cm", "N/cm2", "kip/ft/ft", "kip/ft2", "ksi"
#    force / length^3: "MN/m3", "kN/m3", "N/m3", "N/cm3", "kip/ft3", "kip/in3"
#    force * length / length: "MNm/m", "kNm/m", "Nm/m", "Ncm/cm", "kip.ft/ft", "kip.in/in"
#    force * length / angle: "kNm/rad", "Nm/rad", "Ncm/rad", "kip.ft/rad", "kip.in/rad"
#    force * length / Length / angle: "kNm/m/rad", "Nm/m/rad", "Ncm/cm/rad", "kip.ft/ft/rad", "kip.in/in/rad"
#    mass: "t", "kg", "dag", "g", "µg", "lbm"
#    mass / length^3: "kg/m3", "kg/cm3", "lbm/ft3", "lbm/in3"
#    temperature: "C°", "F°"
#    1 / temperature: "1/C°", "1/F°"
#    temperature / length: "ΔC°/m", "ΔC°/cm", "ΔF°/ft", "ΔF°/in"
#    angle: "rad"
#    angle / length: "rad/m", "rad/cm", "rad/ft", "rad/in"
#    dimensionless: "mm/m", "µstrain", "%", ""
#
# Example:
CustomUnits = cm > mm, cm2 > mm2, cm3 > mm3, cm4 > mm4, cm6 > mm6, kN > N

#---
# acceleration of gravity in m/s2. In the imperial system g needs correspond to 3.174ft/s2 otherwise the
# conversion from lbm to lbf does not work. 'gravity' is always interpreted to be in m/s^2 irrespective of
# the choice of 'UnitsSystem'
#---
# the conventional standard value:
# gravity=9.80663520001 
# on the poles:
# gravity = 9.832
# on the equator:
# gravity = 9.780
# the official value used for converting from Imperial to SI units (see https://www.quora.com/What-is-the-imperial-unit-for-mass):
# gravity = 9.80665
# the value normally used in countries with SI units: 
gravity = 10.0

#---
# limit distance for snapping together points.
# Is used as the default for the 'AssembleModel'-, 
# 'LineToBeam'-, 'MeshToShell'- and 'Line Line Intersection'-component
# it is either in meter or feet 
#---
limit_dist = 0.005

#---
# Limit absolute value of the cosine of an angle to consider
# two lines as being parallel
#---
limit_parallel = 0.99999995

#---
# if set to true unhides the category 'x1.UIparam' in the Karamba3D toolbar which contains components 
# for displaying model properties via parametric input only. This can be used in cases where the 
# Grasshopprt canvas is not visible for the user - for example when working with 'Shapediver' or the like.
#---
with_parametric_user_interface = false

#---
# Rendering of arrows is computationally intensive and makes moving around large models cumbersome.
# Therefore no arrow heads only lines are drawn in case of coordinate systems by default.
#---
Coordinate_System_With_Lines = true

#---
# number format of the 'Legend T' output of the ModelView-component for
#    stresses, strains and utilization
#---
legend_stress_number_fmt = "{0,9:0.00e+00}"
legend_strain_number_fmt = "{0,9:0.00e+00}"
legend_resdisp_number_fmt = "{0,9:0.00e+00}"
legend_utilization_number_fmt = "{0,9:0.0}%"

#---
# number of colors for visualizing stresses, strains in positive and negative range
#---
legend_num_colors = 10

#---
# if true and zero lies in the range of results then the colour range will be centred on zero
#---
center_color_range_on_zero = true

#---
# coloring of legends
# color names can either be given by name or RGB value: (red, green, blue)
# the first color signifies values below the result range
# the last color signifies values above the result range
#---
legend_colors = yellow|red|white|blue|LimeGreen
beam_stress_legend_colors = yellow|red|255,255,255|blue|LimeGreen
beam_utilization_legend_colors = yellow|red|white|blue|LimeGreen
shell_utilization_legend_colors = yellow|red|white|blue|LimeGreen
shell_sig1_legend_colors = yellow|red|white|blue|LimeGreen
shell_sig2_legend_colors = yellow|red|white|blue|LimeGreen
shell_sigV_legend_colors = yellow|red|white|0,0,255|LimeGreen
resultant_disp_legend_colors = yellow|white|magenta|LimeGreen
thickness_legend_colors = Wheat|white|Gold|Plum

#---
# default cross section color of beams and shells
#---
beam_cross_section_color = Blue
shell_cross_section_color = LightBlue

#---
# colors for coloring positive values of the cross section forces curves
#---
crosec_force_color_pos_Nx = LightBlue
crosec_force_color_pos_Vy = LightGreen
crosec_force_color_pos_Vz = LightSkyBlue
crosec_force_color_pos_Mx = Red
crosec_force_color_pos_My = SeaGreen
crosec_force_color_pos_Mz = CadetBlue

#---
# colors for coloring negative values of the cross section forces curves
#---
crosec_force_color_neg_Nx = LightSalmon
crosec_force_color_neg_Vy = LightCoral
crosec_force_color_neg_Vz = LightPink
crosec_force_color_neg_Mx = CadetBlue
crosec_force_color_neg_My = DarkOrange
crosec_force_color_neg_Mz = SandyBrown

#---
# color for coloring positive values shell section results
#---
shellsec_color_pos = LightBlue

#---
# color for coloring negative values shell section results
#---
shellsec_color_neg = LightSalmon


shellsec_color_pos

#---
# text height and offset of cross section force values at elements
#---
crosec_force_text_height = 20
crosec_force_text_offset = 20
crosec_force_text_color = Black
crosec_force_number_fmt = "{0:f}"

#---
# color and number format for output of reaction forces
#---
reaction_number_fmt = "{0:f}"
reaction_number_color = Black

#---
# text color, height and offset of element identifiers
#---
elemID_text_height = 20
elemID_text_offset = 20
elemID_text_color = Black

#---
# text height and offset of cross section names
#---
crosec_text_height = 20
crosec_text_offset =-20
crosec_text_color = Black

#---
# text height and offset of cross material names
#---
material_text_height = 20
material_text_offset =-20
material_text_color = Black

#---
# text height and offset of node tags
#---
node_text_height = 20
node_text_offset =-20
node_text_color = Black

#---
# text height and offset of NII values at elements
#---
NII_text_height = 20
NII_text_offset =-20
NII_text_color = Black
NII_number_fmt = "{0:f}"

#---
# maximum number of beam sections for mesh display
#---
maximum_ncrosec=500

#---
# factor for number of faces for rendering circular cross sections
#---
circular_cross_sections_n_faces_factor=6

#---
# maximum number of line segments per element when drawing stress- or force-flow-lines on meshes
#---
maximum_mesh_lines_per_element=500

#---
# maximum length and number of lines of text in information output
#---
maximum_info_lines=100
maximum_info_line_length=100

#---
# offset between symbols and annotations
#---
annotation_offset=20

#---
# render settings for the graphical user interface components
#---
GUI_Text_Font_Name = "Arial"
GUI_Text_Font_Size = 8
GUI_DropDown_Font_Name = "Arial"
GUI_DropDown_Font_Size = 10
GUI_MenuHeader_Font_Name = "Arial"
GUI_DropDown_Font_Size = 8
GUI_SliderValueTag_Font_Name = "Arial"
GUI_SliderValueTag_Font_Size = 10
GUI_RadioButton_Size_X = 10
GUI_RadioButton_Size_Y = 10
GUI_CheckBox_Size_X = 10
GUI_CheckBox_Size_Y = 10

#---
# averaging procedure for calculating vertex results from element results
# when producing rendered results
#---
# possible values:
# 'average'	   take average of elements that are neighbors to a node, element results are weighted by angle
# 'maxabs'     take maximum of absolute value of neighboring element, keep sign
# 'max'        take maximum value of neighboring element
# 'min'        take minimum value of neighboring element
#---
nodal_mesh_results_from_elements = "average"

#---
# default materials:
#---
# Em[kN/cm2], Gm(inplane)[kN/cm2], G(transverse)[kN/cm2], gamma[kN/m3], alphaT[], ftk[kN/cm2], fck[kN/cm2]
#---
Steel = 21000, 8076, 8076, 78.5, 1.2E-05, 23.5, -23.5 
Concrete = 3000, 1375, 1375, 25, 1.00E-05, 0.135, -3.0
ReinforcementSteel = 21000, 10500, 10500, 78.5, 1.2E-05, 50.0, -50

#---
# add caps to the end of beams or at the boundary of shells in case both sides are rendered
#---
with_caps = true

#---
# weld meshes before output to increase rendering speed
#---
weld_shell_meshes_for_output = true
weld_beam_meshes_for_output = true

#---
#parameters for shell_section component. Tolerance is used to set the zero interval.
#delta is a lower bound for the halfing procedure used to find the first point on a mesh.
#---
shell_section_tol = 1E-12
shell_section_delta = 0.02


#---
# colors for coloring positive values of the shell section results
#---
shellsec_color_pos_N_tt  = LightBlue
shellsec_color_pos_N_nn  = LightGreen
shellsec_color_pos_N_tn  = LightSkyBlue
shellsec_color_pos_M_tt  = Red
shellsec_color_pos_M_nn  = SeaGreen
shellsec_color_pos_M_tn  = CadetBlue
shellsec_color_pos_V_t   = LightBlue
shellsec_color_pos_V_n   = LightGreen

shellsec_color_pos_Sig_tt   = LightBlue
shellsec_color_pos_Sig_nn   = LightGreen
shellsec_color_pos_Sig_tn   = LightSkyBlue
shellsec_color_pos_Eps_tt   = Red
shellsec_color_pos_Eps_nn   = SeaGreen
shellsec_color_pos_Eps_tn   = CadetBlue

shellsec_color_pos_X         = LightBlue
shellsec_color_pos_Y   		 = LightGreen
shellsec_color_pos_Z         = LightSkyBlue
shellsec_color_pos_DispLen   = Red                   
#---                 
# colors for coloring negative values of the shell section results
#---
shellsec_color_neg_N_tt  = LightSalmon
shellsec_color_neg_N_nn  = LightCoral
shellsec_color_neg_N_tn  = LightPink
shellsec_color_neg_M_tt  = CadetBlue
shellsec_color_neg_M_nn  = DarkOrange
shellsec_color_neg_M_tn  = SandyBrown
shellsec_color_neg_V_t   = LightSalmon
shellsec_color_neg_V_n   = LightCoral

shellsec_color_neg_Sig_tt   = LightSalmon
shellsec_color_neg_Sig_nn   = LightCoral
shellsec_color_neg_Sig_tn   = LightPink
shellsec_color_neg_Eps_tt   = CadetBlue
shellsec_color_neg_Eps_nn   = DarkOrange
shellsec_color_neg_Eps_tn   = SandyBrown  

shellsec_color_neg_X         = LightSalmon
shellsec_color_neg_Y         = LightCoral
shellsec_color_neg_Z         = LightPink
shellsec_color_neg_DispLen   = CadetBlue

#---
# for splitting splines into lines at the LineToBeam-component (see https://developer.rhino3d.com/api/RhinoCommon/html/M_Rhino_Geometry_Curve_ToPolyline_1.htm)
#---
# ( 0 to pi ) Maximum angle (in radians) between unit tangents at adjacent vertices.
ToPolyline_maxAngleRadians = 0.03 
# If tolerance = 0, the parameter is ignored. This parameter controls the maximum permitted value of the distance in the base unit for geometry input from the curve to the polyline.
ToPolyline_Tolerance = 0.01
# If maxEdgeLength = 0, the parameter is ignored. This parameter controls the maximum permitted edge length in the base unit for geometry input. 
ToPolyline_minEdgeLength = 0.25

#---
# safety coefficient for elements which can not buckle according to EN 1993-1-1 
#---
gammaM0 = 1.0
#---
# safety coefficient for elements which can buckle according to EN 1993-1-1 
#---
gammaM1 = 1.1
